/*Q2. There are lists where insertion should ensure the ordering of data elements.
Since the elements are in ascending order the search can terminate once equal
or greater element is found. Implement a doubly linked list of ordered integers
(ascending/descending) with insert, search and display operations.
[20]*/
#include<stdio.h>
#include<stdlib.h>
typedef struct node
{
int data;
struct node *next,*prev;
}node;
#define nodealloc (node *)malloc(sizeof(node *));
node *create(node *list)
{
node *temp,*newnode;
int i,n;
printf("\nenter limit");
scanf("%d",&n);
for(i=0;i<n;i++)
{
newnode=nodealloc;
printf("\nenter val");
scanf("%d",&newnode->data);
if(list==NULL)
{
list=temp=newnode;
newnode->next=list;
list->prev=newnode;
}
else
{
temp->next=newnode;
newnode->prev=temp;
temp=newnode;
newnode->next=list;
list->prev=newnode;
}
}return list;
}
node *search(node *list)
{
int num,flag=0;
node *temp,*newnode;
printf("\nenter num");
scanf("%d",&num);
for(temp=list;temp->next!=list;temp=temp->next)
{
if(num>=temp->data)
{
flag=1;
break;
}
}
if(flag==1)
printf("\nnum is greater or equal");
else
{
printf("not equal");
}

}
node *disp(node *list)
{
node *temp;
temp=list;
do
{
printf("%d\t",temp->data);
temp=temp->next;
}while(temp!=list);
}
int main()
{
int i,ch;
node *list=NULL;
do
{
printf("\nenter choice\n1-create\n2-disp\n3-search=\t");
scanf("%d",&ch);
switch(ch)
{
case 1:list=create(list);
break;
case 2:disp(list);
break;
case 3:search(list);
break;
}
}while(ch<4);
}
